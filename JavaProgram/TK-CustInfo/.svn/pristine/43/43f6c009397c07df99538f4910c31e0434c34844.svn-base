package com.fh.controller.record;

import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.fh.controller.base.BaseController;
import com.fh.entity.Page;
import com.fh.entity.section.Patient;
import com.fh.entity.section.RecordConfig;
import com.fh.service.record.RecordService;
import com.fh.service.record.SectionBaseService;
import com.fh.util.Jurisdiction;
import com.fh.util.PageData;
import com.fh.util.Tools;
import com.fh.util.record.GetXianlinRecordData;

/** 
 * 类名称：RecordController
 * 创建人：shanghaizhao 
 * 创建时间：2017-11-06
 */
@Controller
@RequestMapping(value="/record")
public class RecordController extends BaseController {
	
	@Resource(name="recordService")
	private RecordService recordService;
	
	@Resource(name="sectionBaseService")
	private SectionBaseService sectionBaseService;
	
	/**
	 * 问诊数据名称配置列表 
	 */
	@RequestMapping(value="/configure")
	public ModelAndView configure(Page page){
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		page.setPd(pd);
		try {
			List<PageData> varList = recordService.configList(page);
			mv.addObject("csize", varList.size());
			mv.addObject("varList", varList);
			mv.setViewName("record/configure_List");
			mv.addObject("pd", pd);
			mv.addObject("QX",Jurisdiction.getHC());	//按钮权限
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}
	
	
	/**去新增页面
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/goAdd")
	public ModelAndView goAdd()throws Exception{
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		List<String> list = recordService.configColumn();
		// 去除已经存在的配置项，使在新增的时候只可选择没有添加过的字段
		pd.put("hosipitalId", "tk001");
		List<String> column = recordService.getColumn(pd);
		List<String> colist = new ArrayList<String>();
		for(String i:list){
			if(!column.contains(i)){
				colist.add(i);
			}
		}
		mv.addObject("fieldOrder", pd.get("fieldOrder"));
		mv.setViewName("record/configure_add");
		mv.addObject("colist", colist);
		mv.addObject("msg", "toSave");
		mv.addObject("pd", pd);
		return mv;
	}
	
	/**去编辑页面
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/goEdit")
	public ModelAndView goEdit()throws Exception{
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		RecordConfig record = recordService.getEntityById(pd);
		
		mv.setViewName("record/configure_edit");
		mv.addObject("record", record);
		mv.addObject("msg", "toSave");
		mv.addObject("pd", pd);
		return mv;
	}
	
	/**保存
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/toSave")
	public ModelAndView toSave()throws Exception{
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		if(pd.get("configureId") == null) {
			recordService.toSave(pd);
			mv.addObject("msg","success");
		}else {
			recordService.toUpdate(pd);
			mv.addObject("msg","success");
		}
		mv.setViewName("save_result");
		return mv;
	}
	
	/**提升顺序
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/goUpOrder")
	public void goUpOrder(HttpServletRequest request,PrintWriter out)throws Exception{
		PageData pd = new PageData();
		pd = this.getPageData();
		int num = recordService.upOrder(pd);
		if(num==1) {
			out.write("success");
		}else {
			out.write("exist");
		}
		out.close();
	}

	/**降低顺序
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/goDownOrder")
	public void goDownOrder(HttpServletRequest request,PrintWriter out)throws Exception{
		PageData pd = new PageData();
		pd = this.getPageData();
		int num = recordService.downOrder(pd);
		if(num==1) {
			out.write("success");
		}else {
			out.write("exist");
		}
		out.close();
	}
	
	/***
	 * 星级评价页面 
	 */
	@RequestMapping(value="/goSection")
	public ModelAndView goSection(Page page) throws Exception{
		PageData pd = new PageData();
		pd = this.getPageData();
		ModelAndView mv = new ModelAndView();
		// 调用获取仙林鼓楼医院接口获取单条问诊数据
		String visitCode = pd.getString("visitCode");
		if(!Tools.isEmpty(visitCode)){
			Patient patient = GetXianlinRecordData.getPatient(visitCode);
			if(patient!=null){
				PageData pInfo = sectionBaseService.getPatientById(pd);
				if(pInfo==null){
					// 本地数据库中不存在，先入库
					sectionBaseService.save(patient);
				}
				//从本地库中取出单条详细数据
				PageData pds = sectionBaseService.getPatientById(pd);
				if(pds != null) {
					// 根据所属医院ID从配置表中获取配置名称及顺序
					pd.put("isShow", 1);
					pd.put("hosipitalId", "tk001");
					page.setPd(pd);
					List<PageData> varList = recordService.configList(page);
					LinkedHashMap<String, String> map = new LinkedHashMap<String, String>();
					for (PageData conf : varList) {
						map.put(conf.getString("LABEL"), pds.getString(conf.getString("FIELD_NAME")));
					}
					mv.addObject("mapInfo", map);
					mv.addObject("pd", pds);
					mv.setViewName("section/doctor_eva");
				}
				
			}else{
				// 获取问诊数据失败,暂跳转到评价成功页
				mv.addObject("isAdd",3);
				mv.setViewName("section/doctor_eva_success");
			}
		}else{
			mv.setViewName("error");
		}
		return mv;
	}
	
	/***
	 * 修改显示状态
	 */
	@RequestMapping(value="/updateStatus")
	public void updateStatus(PrintWriter out) throws Exception{
		PageData pd = new PageData();
		pd = this.getPageData();
		if("1".equals(pd.get("isShow"))) {
			pd.put("isShow", "2");
		}else {
			pd.put("isShow", "1");
		}
		int num = recordService.updateStatus(pd);
		if(num==1) {
			out.write("success");
		}else {
			out.write("exist");
		}
		out.close();
	}
	
	@InitBinder
	public void initBinder(WebDataBinder binder){
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(format,true));
	}
}
