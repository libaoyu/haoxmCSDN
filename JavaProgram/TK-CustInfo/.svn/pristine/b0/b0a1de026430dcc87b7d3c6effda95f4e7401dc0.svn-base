package com.fh.controller.questionnaire;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fh.controller.base.BaseController;
import com.fh.entity.Page;
import com.fh.entity.system.Questionnaire;
import com.fh.entity.system.Questions;
import com.fh.service.questionnaire.QuestionnaireResultsService;
import com.fh.service.questionnaire.QuestionnaireService;
import com.fh.service.questionnaire.QuestionsHeaderService;
import com.fh.service.questionnaire.QuestionsService;
import com.fh.service.record.SectionBaseService;
import com.fh.service.system.role.impl.RoleTreeService;
import com.fh.util.Const;
import com.fh.util.ConversionUtil;
import com.fh.util.DateUtil;
import com.fh.util.Jurisdiction;
import com.fh.util.PageData;
import com.fh.util.Tools;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * QuestionStaticController
 * 
 * @author yaoning 
 * 创建时间：2017-08-01
 */

@Controller
@RequestMapping(value = "/questionStatic")
public class QuestionStaticController extends BaseController {

	@Resource(name = "questionnaireService")
	private QuestionnaireService questionnaireService;
	@Resource(name = "questionsService")
	private QuestionsService questionsService;
	@Resource(name = "questionsHeaderService")
	private QuestionsHeaderService questionsHeaderService;
	@Resource(name = "sectionBaseService")
	private SectionBaseService sectionBaseService;
	@Resource(name="questionnaireResultsService")
	private QuestionnaireResultsService questionnaireResultsService;
	@Resource(name="roleTreeService")
	private RoleTreeService roleTreeService;
	/**
	 * 去统计图表页面
	 * 
	 * @return
	 */
	@RequestMapping(value = "/goStatisChart")
	public ModelAndView goStatisticsChart() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		List<Questionnaire> list = new ArrayList<Questionnaire>();
		try {
			list = questionnaireService.findQuestionnaireList(pd);
		} catch (Exception e) {
			e.printStackTrace();
		}
		mv.addObject("pageList", list);
		mv.setViewName("questionnaire/questionStatisChart");
		return mv;
	}

	@RequestMapping(value = "/goStatissticsData")
	public ModelAndView goStatissticsData(Page page) {
		logBefore(logger, "列表Questions");
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		try {
			pd = this.getPageData();
			String startTime = pd.getString("lastLoginStart");
			String endTime = pd.getString("lastLoginEnd");
			page.setPd(pd);
			List<Questions> parentList = questionsService.oneStatislist(page);
			List<Questions> childList = questionsService.childList(pd);
			// 查询结果百分比
			pd.put("tx", "qb");
			PageData qb = questionnaireResultsService.findCountResultStatL1(pd);
			for (int i = 0; i < parentList.size(); i++) {
				Questions entity = parentList.get(i);
				// 问卷调查对象调整--------------开始
				String respondentsStr = entity.getLevel();
				StringBuffer respondentsName = new StringBuffer();
				if (respondentsStr != null && respondentsStr != "") {
					Map<String, String> map = ConversionUtil.getStaffLevel();
					if (respondentsStr.indexOf(",") > -1) {
						String[] respondentsArr = respondentsStr.split(",");
						for (int j = 0; j < respondentsArr.length; j++) {
							if (j == 0) {
								respondentsName.append(map.get(respondentsArr[j]));
							} else {
								respondentsName.append("," + map.get(respondentsArr[j]));
							}
						}
					} else {
						respondentsName.append(map.get(respondentsStr));
					}
					parentList.get(i).setLevel(respondentsName.toString());
				}
				// 一级类目满意度计算
				if ("L1".equals(entity.getClassification())) {
					PageData entitypd = new PageData();
					entitypd.put("questionId", entity.getQuestionId());
					entitypd.put("tx", "L1");
					entitypd.put("lastLoginStart", startTime);
					entitypd.put("lastLoginEnd", endTime);
					// 查询结果百分比
					PageData pdf = questionnaireResultsService.findCountResultStatL1(entitypd);
					if (!Tools.isEmpty(pdf.getString("fm"))) {
						entity.setQuestionYx(pdf.getString("yxyb"));
						entity.setQuestionWx(pdf.getString("wxyb"));
						entity.setSatisfaction(pdf.getString("bfb"));
						entity.setQuestionFm(pdf.getString("fm"));
						entity.setQuestionFz(pdf.getString("fz"));
					}

				}
				// 获取对应二级列表
				List<Questions> toParent = new ArrayList<Questions>();
				for (Questions questions : childList) {
					if (entity.getQuestionId().equals(questions.getParentId())) {
						if ("T0".equals(questions.getTypes())) {
							PageData entitypd = new PageData();
							entitypd.put("questionId", questions.getQuestionId());
							entitypd.put("tx", "L2");
							entitypd.put("lastLoginStart", startTime);
							entitypd.put("lastLoginEnd", endTime);
							// 查询结果百分比
							PageData pdf = questionnaireResultsService.findCountResultStatL1(entitypd);
							questions.setQuestionYx(pdf.getString("yxyb"));
							questions.setQuestionWx(pdf.getString("wxyb"));
							questions.setSatisfaction(pdf.getString("bfb"));
							questions.setQuestionFm(pdf.getString("fm"));
							questions.setQuestionFz(pdf.getString("fz"));
						}
						if ("T4".equals(questions.getTypes())) {
							PageData entitypd = new PageData();
							entitypd.put("questionId", questions.getQuestionId());
							entitypd.put("lastLoginStart", startTime);
							entitypd.put("lastLoginEnd", endTime);
							PageData pdf = questionnaireResultsService.findCountResultStatT4(entitypd);
							questions.setSatisfaction(pdf.getString("bfb"));
							questions.setQuestionFm(pdf.getString("fm"));
							questions.setQuestionFz(pdf.getString("fz"));
						}
						toParent.add(questions);
					}
				}
				if (toParent.size() > 0) {
					entity.setSUBQUESTIONS(toParent);
				}

			}

			List<Questionnaire> questionnaireList = questionnaireService.findQuestionnaireList(new PageData()); // 列出Question列表
			mv.addObject("questionnaireList", questionnaireList);// 所属问卷
			mv.setViewName("questionnaire/questionSatisData");
			mv.addObject("varList", parentList);
			mv.addObject("pd", pd);
			mv.addObject("qb", qb);
			mv.addObject(Const.SESSION_QX, Jurisdiction.getHC()); // 按钮权限
		} catch (Exception e) {
			logger.error(e.toString(), e);
		}
		return mv;
	}

	/**
	 * 统计图表数据组装
	 * 
	 * @param page
	 * @return
	 */
	@RequestMapping(value = "/chartList")
	public ModelAndView list(Page page) {
		ModelAndView mv = this.getModelAndView();
		List<Questionnaire> wjlist = new ArrayList<Questionnaire>();
		try {
			wjlist = questionnaireService.findQuestionnaireList(new PageData());
		} catch (Exception e) {
			e.printStackTrace();
		}
		PageData pd = null;
		pd = this.getPageData();
		page.setPd(pd);

		// 查询问卷下属问题
		try {
			// 判断是否存在结果
			// List<PageData>
			// listQuestionResult=questionsHeaderService.findCoutQuestioneResult(pd);
			List<PageData> pdList = questionsService.findByStatIdlist(page);
			if (pdList != null) {
				// 循环问题查找答案

				for (PageData pageData : pdList) {
					// 组装饼图数据
					List<PageData> bt = new ArrayList<PageData>();
					String[] btData = null;
					// 组装柱状图数据
					String[] xData = null;
					String[] yData = null;

					// 组装返回结果
					List<PageData> result = new ArrayList<PageData>();
					// 总数量
					Long count = 0L;

					List<PageData> resultList = new ArrayList<PageData>();
//					if ("L0".equals(pageData.get("classification"))) {
//						// 查询卷头问题
//						resultList = questionsHeaderService.findCountHeaderResult(pageData);
//					} else {
						// 复选题
						if ("T2".equals(pageData.get("types"))) {
							// 获取复选题选项
							String questionData = pageData.getString("questionData");// T3选项
							JSONArray json = JSONArray.fromObject(questionData);
							resultList = questionnaireResultsService.findCountResultT2(pageData, json);
							// T2类型结果总数
							count = questionnaireResultsService.findCountT2Sum(pageData);

						} else {
							resultList = questionnaireResultsService.findCountResult(pageData);
						}
//					}
					if (!"T2".equals(pageData.get("types"))) {
						for (PageData pageData2 : resultList) {
							Long s = (Long) pageData2.get("sum");
							count = count + s;
						}
					}
					if (count == 0) {
						pageData.put("isChart", false);
					} else {
						pageData.put("isChart", true);
					}
					if (count != 0) {
						for (PageData pageData2 : resultList) {
							Long s = (Long) pageData2.get("sum");
							BigDecimal sum = new BigDecimal(s);
							BigDecimal bfb = sum.divide(new BigDecimal(count), 4, RoundingMode.HALF_DOWN)
									.multiply(new BigDecimal(100)).stripTrailingZeros();
							if (bfb.compareTo(BigDecimal.ZERO) != 0) {
								pageData2.put("bfb", bfb);
							}
						}
					}
					// 默认题型计算
					if ("T0".equals(pageData.get("types"))) {
						// 组装前台展示数据
						Map<String, String> map = ConversionUtil.getDefaultOption();// T0选项
						// 初始化各图表
						btData = new String[map.size()];
						xData = new String[map.size()];
						yData = new String[map.size()];
						Set<String> set = map.keySet();
						int i = 0;
						for (String str : set) {
							PageData btpd2 = new PageData();
							btpd2.put("name", map.get(str));
							btpd2.put("value", 0);
							btData[i] = map.get(str);
							xData[i] = map.get(str);
							PageData respd = new PageData();
							respd.put("opt", map.get(str));
							for (PageData pd2 : resultList) {
								if (str.equals(pd2.getString("opt"))) {
									respd.put("sum", pd2.get("sum"));
									respd.put("bfb", pd2.get("bfb"));
									btpd2.put("value", pd2.get("sum"));
									yData[i] = String.valueOf((Long) pd2.get("sum"));
									break;
								}
							}
							result.add(respd);
							bt.add(btpd2);
							i++;
						}

					}

					// 单选题型或复选
					if ("T1".equals(pageData.get("types")) || "T2".equals(pageData.get("types"))
							|| "T4".equals(pageData.get("types"))) {
						// 获取前台选项组装数据
						String questionData = pageData.getString("questionData");// T1选项
						JSONArray json = JSONArray.fromObject(questionData);
						// 初始化各图表
						btData = new String[json.size()];
						xData = new String[json.size()];
						yData = new String[json.size()];

						for (int i = 0; i < json.size(); i++) {
							JSONObject j = json.getJSONObject(i);
							PageData pd2 = new PageData();
							pd2.put("opt", j.getString("key"));
							PageData btpd2 = new PageData();
							btpd2.put("name", j.getString("key"));
							btData[i] = j.getString("key");
							xData[i] = j.getString("key");
							for (PageData pageData2 : resultList) {
								if (j.getString("value").equals(pageData2.get("opt"))) {
									pd2.put("sum", pageData2.get("sum"));
									pd2.put("bfb", pageData2.get("bfb"));
									yData[i] = String.valueOf((Long) pageData2.get("sum"));
									btpd2.put("value", pageData2.get("sum"));
								}

							}
							result.add(pd2);
							bt.add(btpd2);
						}
					}
					// 下拉
					if ("T3".equals(pageData.get("types"))) {
						// 获取前台选项组装数据
						String questionData = pageData.getString("questionData");// T3选项
						JSONArray json = JSONArray.fromObject(questionData);
						// 初始化各图表
						btData = new String[json.size() - 1];
						xData = new String[json.size() - 1];
						yData = new String[json.size() - 1];
						for (int i = 1; i < json.size(); i++) {
							JSONObject j = json.getJSONObject(i);
							PageData pd2 = new PageData();
							PageData btpd2 = new PageData();
							pd2.put("opt", j.getString("key"));
							btpd2.put("name", j.getString("key"));
							btData[i - 1] = j.getString("key");
							xData[i - 1] = j.getString("key");
							for (PageData pageData2 : resultList) {
								if (j.getString("value").equals(pageData2.get("opt"))) {
									pd2.put("sum", pageData2.get("sum"));
									pd2.put("bfb", pageData2.get("bfb"));
									yData[i - 1] = String.valueOf((Long) pageData2.get("sum"));
									btpd2.put("value", pageData2.get("sum"));
								}
							}
							result.add(pd2);
							bt.add(btpd2);
						}
					}
					pageData.put("btData", btData);
					pageData.put("bt", bt);
					pageData.put("xData", xData);
					pageData.put("yData", yData);

					PageData respd = new PageData();
					respd.put("opt", "有效填写量");
					respd.put("sum", count);
					result.add(respd);
					pageData.put("resultList", result);
				}
			}
			mv.addObject("pdList", pdList);
			JSONArray json = JSONArray.fromObject(pdList);
			mv.addObject("pdListJson", json.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		mv.addObject("pd", pd);
		mv.addObject("pageList", wjlist);
		mv.addObject("page", page);
		mv.setViewName("questionnaire/questionStatisChart");
		return mv;

	}

	/**
	 * 
	 * 星级评定统计图表
	 * 
	 * 
	 */
	@RequestMapping(value="/starRat")
	public ModelAndView getStarRat(Page page) {
		PageData pd = new PageData();
		ModelAndView mv = this.getModelAndView();
		try {
			pd = this.getPageData();
			//查询医院列表
			List<PageData> hospItals = sectionBaseService.findHospItal(pd);
			Long startTime = System.currentTimeMillis();
			String HOSIPITAL_CODE = pd.getString("HOSIPITAL_CODE");
			
			if(Tools.notEmpty(HOSIPITAL_CODE)){
				//查询统计结果所需的visitCode
				List<PageData> visitCodes = sectionBaseService.findVisitCode(pd);
				//反向查询问卷结果id
//				List<String> questionnaireIds = questionnaireResultsService.findResultQuestionnaireId(visitCodes);
				this.getUserHC(pd, roleTreeService);
				//查询此用户权限下可查看的问卷
				List<String> naireList = questionnaireService.findQuestionnaireListStr(pd);
				
//				questionnaireIds.retainAll(naireList);
				
//				if(questionnaireIds !=null && questionnaireIds.size(){
					StringBuffer sb = new StringBuffer();
					//获取问卷id
//					for (int i = 0; i < questionnaireIds.size(); i++) {
//						sb.append("'");
//						sb.append(questionnaireIds.get(i).getString("questionId"));
//						sb.append("',");
//					}
//					sb.deleteCharAt(sb.length()-1);
//					pd.put("questionnaireId", sb.toString());
					
					
					String q =pd.getString("questionnaireId"); 
					sb.append("'");
					sb.append(q);
					sb.append("'");
					pd.put("questionnaireId", sb.toString());
					page.setPd(pd);
					List<PageData> questionList = questionsHeaderService.findQuestion(page);//分页查询问题
					pd.put("questionnaireId",q);
					if (questionList != null) {
						// 循环问题查询答案
						int isFinance = Integer.valueOf(pd.getString("isFinance")); //是否财务月
						int kd =  Integer.valueOf(pd.getString("kd"));  //统计刻度
						String lastLoginStart = "";
						String lastLoginEnd = "";
						if(isFinance == 0){  //财务月
							Date startBT = new Date();
							Date endBt = new Date();
							if (!Tools.isEmpty(pd.getString("btEndTime"))) {
								SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
								endBt = sdf.parse(pd.getString("btEndTime"));
							}
							Calendar calendarL = Calendar.getInstance();
							calendarL.setTime(endBt);
							calendarL.add(Calendar.MONDAY, -1);
							calendarL.set(Calendar.DAY_OF_MONTH, 26);
							calendarL.set(Calendar.HOUR_OF_DAY, 0);
							calendarL.set(Calendar.MINUTE, 0);
							calendarL.set(Calendar.SECOND, 0);
							startBT = calendarL.getTime();
							calendarL.setTime(endBt);
							calendarL.set(Calendar.DAY_OF_MONTH, 26);
							calendarL.set(Calendar.HOUR_OF_DAY, 0);
							calendarL.set(Calendar.MINUTE, 0);
							calendarL.set(Calendar.SECOND, 0);
							endBt = calendarL.getTime();
							SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							lastLoginStart = sdf.format(startBT);
							lastLoginEnd = sdf.format(endBt);
						}else{ //非财务月
							lastLoginStart = pd.getString("btStartTime");
							lastLoginEnd = pd.getString("btEndTime");
						}
						
						for (PageData pdret : questionList) {
							// 组装饼图数据---------start
							List<PageData> bt = new ArrayList<PageData>();
							String[] btData = null; //
							pdret.put("lastLoginStart",lastLoginStart);
							pdret.put("lastLoginEnd", lastLoginEnd);
							//查询出题目答案数量
							List<PageData> starBt = questionnaireResultsService.findStarBt(pdret);
							// 组装前台展示数据
							Map<String, String> map = ConversionUtil.getDefaultOption();// T0选项
							// 初始化饼图
							if(starBt!=null){
								btData = new String[starBt.size()];
							}
							Set<String> set = map.keySet();
							int i = 0;
							Long fz = 0L;
							Long fm = 0L;
								
							for (PageData pd2 : starBt) {
								PageData btpd2 = new PageData();
								Long sum = (Long) pd2.get("sum");//人数
								Long source = Long.valueOf(pd2.getString("opt"));//分数
								fz += sum * source;
								fm += sum;
								if(source == 0){
									btData[i] = "不适用";
									btpd2.put("name","不适用");
								}else{
									btData[i] = source+"分";
									btpd2.put("name", source+"分");
								}
								btpd2.put("value", pd2.get("sum"));
								
								bt.add(btpd2);
								i++;
							}
							BigDecimal bfb = new BigDecimal("0");
							if(fm != 0){
								BigDecimal bigFz = new BigDecimal(fz);
								BigDecimal bigFm = new BigDecimal(fm);
								bfb = bigFz.divide(bigFm,2,RoundingMode.HALF_DOWN).stripTrailingZeros();
								if(bfb.compareTo(BigDecimal.ZERO)==0){
									bfb = new BigDecimal("0");
								}
							}
							pdret.put("bfb", bfb);
							pdret.put("bt", bt);
							pdret.put("btData", btData);
							
							// 组装饼图数据---------end
							//折线图数据组装---------------------start
							
							
							SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
							Date endZX= sdf.parse(lastLoginEnd);//结束时间
							Date startZX= sdf.parse(lastLoginStart);// 开始时间
							Map mapZX = questionnaireResultsService.findStarZX(isFinance,kd,pdret.getString("questionId"),startZX,endZX);
							pdret.put("xData", mapZX.get("x"));
							pdret.put("yData", mapZX.get("y"));
						}
						List<PageData>  section = sectionBaseService.findSection(pd);
						mv.addObject("section",section);
						mv.addObject("questionList", questionList);//饼图、折线图数据集合
						JSONArray json = JSONArray.fromObject(questionList);
						mv.addObject("questionStr",json.toString());//饼图、折线图数据json
					}
				}
//			}
			
			List<Questionnaire> questionnaireList = questionnaireService.findQuestionnaireList(new PageData()); // 列出Question列表
			mv.addObject("kdList",ConversionUtil.getKDType());
			mv.addObject("kd",pd.getString("kd"));
			mv.addObject("isFinance",pd.getString("isFinance"));
			mv.addObject("questionnaireList", questionnaireList);// 所有问卷
			mv.addObject("hosipItals",hospItals);
			mv.addObject("page ",page);
			mv.addObject("pd",pd);
			mv.setViewName("questionnaire/questionStarLeve");
			mv.addObject(Const.SESSION_QX, Jurisdiction.getHC()); // 按钮权限
			Long endTime = System.currentTimeMillis();
			System.out.println("请求时间："+(endTime-startTime));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}

	@RequestMapping(value="/findSectionCode")
	@ResponseBody
	public List<PageData> findSectionCode(){
		PageData pd = new PageData();
		List<PageData> section = new ArrayList<PageData>();
		try {
			pd = this.getPageData();
			section = sectionBaseService.findSection(pd);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return section;
	}
	
	
	
	public static void main(String[] args) throws Exception {
		
		String str = "fsadfdsfewretjhgfd";
		System.out.println(str.indexOf("d"));
	}

}
