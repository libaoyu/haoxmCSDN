package com.fh.service.questionnaire;

import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fh.controller.base.BaseController;
import com.fh.entity.Page;
import com.fh.service.questionnaire.PageresultService;
import com.fh.service.questionnaire.QuestionPageService;
import com.fh.service.questionnaire.QuestionService;
import com.fh.util.AppUtil;
import com.fh.util.ObjectExcelView;
import com.fh.util.Const;
import com.fh.util.PageData;
import com.fh.util.Tools;
import com.fh.util.Jurisdiction;

/** 
 * 类名称：PageresultController
 * 创建人：FH 
 * 创建时间：2017-02-28
 */
@Controller
@RequestMapping(value="/questionresult")
public class QuestionresultController extends BaseController {
	
	String menuUrl = "questionresult/list.do"; //菜单地址(权限用)
	@Resource(name="pageresultService")
	private PageresultService pageresultService;
	@Resource(name="questionpageService")
	private QuestionPageService questionPageService;
	@Resource(name="questionService")
	private QuestionService questionService;
	/**
	 * 新增
	 */
	@RequestMapping(value="/save")
	public ModelAndView save() throws Exception{
		logBefore(logger, "新增Pageresult");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "add")){return null;} //校验权限
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("QUESTIONRESULT_ID", this.get32UUID());	//主键
		pd.put("QUESTIONCODE", "");	//问题编号
		pd.put("ANSWERNUM", "");	//回答结果
		pd.put("ANSWERDATA", "");	//回答结果
		pd.put("USERCODE", "");	//用户编号
		pd.put("ANSWERDATE", Tools.date2Str(new Date()));	//回答时间
		pageresultService.save(pd);
		mv.addObject("msg","success");
		mv.setViewName("save_result");
		return mv;
	}
	
	/**
	 * 删除
	 */
	@RequestMapping(value="/delete")
	public void delete(PrintWriter out){
		logBefore(logger, "删除Pageresult");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "del")){return;} //校验权限
		PageData pd = new PageData();
		try{
			pd = this.getPageData();
			pageresultService.delete(pd);
			out.write("success");
			out.close();
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		
	}
	
	/**
	 * 修改
	 */
	@RequestMapping(value="/edit")
	public ModelAndView edit() throws Exception{
		logBefore(logger, "修改Pageresult");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "edit")){return null;} //校验权限
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		pageresultService.edit(pd);
		mv.addObject("msg","success");
		mv.setViewName("save_result");
		return mv;
	}
	
	/**
	 * 列表
	 */
	@RequestMapping(value="/list")
	public ModelAndView list(Page page){
		logBefore(logger, "列表Pageresult");
		//if(!Jurisdiction.buttonJurisdiction(menuUrl, "cha")){return null;} //校验权限
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		try{
			pd = this.getPageData();
			page.setPd(pd);
			List<PageData>	pageList = questionPageService.checkList(page);	//查询问卷下拉框
			
			List<PageData>	varList = null;
			List<PageData>	questionTitle = null;
			if( !"".equals(pd.getString("QUESTIONPAGE")) && null != pd.get("QUESTIONPAGE")){
				pd.put("pageId", pd.getString("QUESTIONPAGE"));
				questionTitle = questionService.findByPageIdUser(pd);
				varList = pageresultService.list(page);	//按人分组查询数据
				for(PageData peopleData : varList){
					peopleData.put("answerList", pageresultService.userAnswer(peopleData));
				}		
			}
			mv.addObject("questionTitle", questionTitle);
			mv.addObject("varList", varList);
			mv.addObject("pageList", pageList);
			mv.addObject("pd", pd);
			mv.addObject(Const.SESSION_QX,Jurisdiction.getHC());	//按钮权限
			mv.setViewName("questionnaire/questionresult_list");
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		return mv;
	}
	
	/*
	 * 导出到excel
	 * @return
	 */
	@RequestMapping(value="/excel")
	public ModelAndView exportExcel(){
		logBefore(logger, "导出Pageresult到excel");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "cha")){return null;}
		ModelAndView mv = new ModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		Page page = new Page();
		page.setPd(pd);
		
		List<PageData>	varList = null;
		List<PageData>	questionTitle = null;
		try{
			if( !"".equals(pd.getString("QUESTIONPAGE")) && null != pd.get("QUESTIONPAGE")){
				pd.put("pageId", pd.getString("QUESTIONPAGE"));
				questionTitle = questionService.findByPageIdUser(pd);
				varList = pageresultService.execlList(pd);	//按人分组查询数据
				for(PageData peopleData : varList){
					peopleData.put("answerList", pageresultService.userAnswer(peopleData));
				}		
			}
			Map<String,Object> dataMap = new HashMap<String,Object>();
			List<String> titles = new ArrayList<String>();
			titles.add("问卷名称");	//1
			titles.add("用户名");		//2
			titles.add("联系电话");	//3
			titles.add("所属大楼");	//4
			titles.add("公司名称/居住时间");	//5
			titles.add("回答时间");	//6
			for(PageData titlePd :questionTitle){
				if( null == titlePd.get("ISPARENT")){
					titles.add(titlePd.getString("QUESTIONFLAG")+titlePd.get("QUESTIONCODE"));
				}
			}
			dataMap.put("titles", titles);
			List<PageData> varOList = new ArrayList<PageData>();
			for(int i=0;i<varList.size();i++){
				PageData vpd = new PageData();
				vpd.put("var1", varList.get(i).getString("PAGENAME"));	//1
				vpd.put("var2", varList.get(i).getString("USERNAME"));	//2
				vpd.put("var3", varList.get(i).getString("PHONE"));	//3
				vpd.put("var4", varList.get(i).getString("BUILDING"));	//4
				String strVal = varList.get(i).getString("COMPANY");
				if(strVal == null || "".equals(strVal)){
					strVal = varList.get(i).getString("CHECK_IN");
				}
				vpd.put("var5", strVal);	//5
				vpd.put("var6", varList.get(i).getString("ANSWERDATE"));	//6
				List<PageData> answerList = (List<PageData>) varList.get(i).get("answerList");
				for(int j = 0; j<answerList.size() ; j++){
					if(null != answerList.get(j).get("ANSWERNUM")){
						vpd.put("var"+(7+j),answerList.get(j).get("ANSWERNUM"));
					}
					if(null != answerList.get(j).getString("ANSWERDATA")){
						vpd.put("var"+(7+j),answerList.get(j).getString("ANSWERDATA"));
					}
				}
				varOList.add(vpd);
			}
			dataMap.put("varList", varOList);
			ObjectExcelView erv = new ObjectExcelView();
			mv = new ModelAndView(erv,dataMap);
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		return mv;
	}
	
	/**
	 * 去新增页面
	 */
	@RequestMapping(value="/goAdd")
	public ModelAndView goAdd(){
		logBefore(logger, "去新增Pageresult页面");
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		try {
			mv.setViewName("pageresult/pageresult/pageresult_edit");
			mv.addObject("msg", "save");
			mv.addObject("pd", pd);
		} catch (Exception e) {
			logger.error(e.toString(), e);
		}						
		return mv;
	}	
	
	/**
	 * 去修改页面
	 */
	@RequestMapping(value="/goEdit")
	public ModelAndView goEdit(){
		logBefore(logger, "去修改Pageresult页面");
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		try {
			pd = pageresultService.findById(pd);	//根据ID读取
			mv.setViewName("pageresult/pageresult/pageresult_edit");
			mv.addObject("msg", "edit");
			mv.addObject("pd", pd);
		} catch (Exception e) {
			logger.error(e.toString(), e);
		}						
		return mv;
	}	
	
	/**
	 * 批量删除
	 */
	@RequestMapping(value="/deleteAll")
	@ResponseBody
	public Object deleteAll() {
		logBefore(logger, "批量删除Pageresult");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "dell")){return null;} //校验权限
		PageData pd = new PageData();		
		Map<String,Object> map = new HashMap<String,Object>();
		try {
			pd = this.getPageData();
			List<PageData> pdList = new ArrayList<PageData>();
			String DATA_IDS = pd.getString("DATA_IDS");
			if(null != DATA_IDS && !"".equals(DATA_IDS)){
				String ArrayDATA_IDS[] = DATA_IDS.split(",");
				pageresultService.deleteAll(ArrayDATA_IDS);
				pd.put("msg", "ok");
			}else{
				pd.put("msg", "no");
			}
			pdList.add(pd);
			map.put("list", pdList);
		} catch (Exception e) {
			logger.error(e.toString(), e);
		} finally {
			logAfter(logger);
		}
		return AppUtil.returnObject(pd, map);
	}
	
	@InitBinder
	public void initBinder(WebDataBinder binder){
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(format,true));
	}
}
