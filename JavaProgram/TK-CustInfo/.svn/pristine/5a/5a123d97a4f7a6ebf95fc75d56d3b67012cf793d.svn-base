package com.fh.controller.questionnaire;

import java.io.File;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;
import com.fh.controller.base.BaseController;
import com.fh.entity.Page;
import com.fh.entity.advice.Advice;
import com.fh.entity.system.Roles;
import com.fh.entity.system.User;
import com.fh.service.advice.AdvicePictureService;
import com.fh.service.advice.AdviceService;
import com.fh.service.questionnaire.PageresultService;
import com.fh.service.questionnaire.QuestionPageService;
import com.fh.service.questionnaire.QuestionService;
import com.fh.service.system.role.RoleTreeManager;
import com.fh.util.AppUtil;
import com.fh.util.Const;
import com.fh.util.FileUpload;
import com.fh.util.FileUtil;
import com.fh.util.Jurisdiction;
import com.fh.util.ObjectExcelView;
import com.fh.util.PageData;
import com.fh.util.PathUtil;
import com.fh.util.Tools;

/** 
 * 类名称：QuestionPageController
 * 创建人：FH 
 * 创建时间：2017-02-28
 */
@Controller
@RequestMapping(value="/questionpage")
public class QuestionPageController extends BaseController {
	
	String menuUrl = "questionpage/list.do"; //菜单地址(权限用)
	@Resource(name="questionpageService")
	private QuestionPageService questionpageService;
	@Resource(name="questionService")
	private QuestionService questionService;
	@Resource(name="pageresultService")
	private PageresultService pageresultService;
	@Resource(name="roleTreeService")
	private RoleTreeManager roleTreeService;

	
	//用户开始问卷调查
	@RequestMapping(value="toQPage")
	public ModelAndView toQuesitonPage(){
		ModelAndView mv = new ModelAndView();
		PageData pd = this.getPageData();
		List<PageData> pdList = null;
		String pageCode = pd.getString("pageId");
		try {
			pdList = questionService.findByPageIdUser(pd);
			pd = questionpageService.findByIdUser(pd);
		} catch (Exception e) {
			e.printStackTrace();
		}
		mv.addObject("questionList", pdList);
		mv.addObject("pagePd", pd);
		mv.addObject("pageId", pageCode);
		mv.setViewName("questionnaire/userPage/user");
		return mv;
	}
	
	/**
	 * 用户开始问卷调查
	 * 医疗养护问卷
	 * @return
	 */
	@RequestMapping(value="toRelationPage")
	public ModelAndView toRelationPage(){
		ModelAndView mv = new ModelAndView();
		PageData pd = this.getPageData();
		List<PageData> pdList = null;
		String pageCode = pd.getString("pageId");
		try {
			pdList = questionService.findByPageIdUser(pd);
			pd = questionpageService.findByIdUser(pd);
		} catch (Exception e) {
			e.printStackTrace();
		}
		mv.addObject("questionList", pdList);
		mv.addObject("pagePd", pd);
		mv.addObject("pageId", pageCode);
		mv.setViewName("questionnaire/userPage/community");
		return mv;
	}
	
	/**
	 * 一线服务确认(意见收集)
	 * @return
	 */
	@RequestMapping(value="toFeedbackPage")
	public ModelAndView toFeedbackPage(){
		ModelAndView mv = new ModelAndView();
		PageData pd = this.getPageData();
		List<PageData> pdList = null;
		String pageCode = pd.getString("pageId");
		try {
//			pdList = questionService.findByPageIdUser(pd);
//			pd = questionpageService.findByIdUser(pd);
		} catch (Exception e) {
			e.printStackTrace();
		}
		mv.addObject("questionList", pdList);
		mv.addObject("pagePd", pd);
		mv.addObject("pageId", pageCode);
		mv.setViewName("questionnaire/userPage/feedback");
		return mv;
	}
	/* 0:单选 题2:主观题 3:评分题
	 * 用户提交问卷信息
	 */
	@RequestMapping(value="userAnswer")
	public ModelAndView userAnswer(){
		ModelAndView mv = new ModelAndView();
		List<PageData> listPd = new ArrayList<PageData>();
		PageData userPd = new PageData();
		userPd.put("QUESTIONUSER_ID", this.get32UUID());
		
		Map properties = this.getRequest().getParameterMap();
		String PageCode = this.getRequest().getParameter("pageId");
		Iterator entries = properties.entrySet().iterator(); 
		Map.Entry entry; 
		String name = "";  
		String value = "";  
		while (entries.hasNext()) {
			PageData questionPd = new PageData();
			questionPd.put("QUESTIONRESULT_ID", this.get32UUID());
			questionPd.put("USERCODE",userPd.getString("QUESTIONUSER_ID"));
			questionPd.put("ANSWERDATE",Tools.date2Str(new Date()));
			questionPd.put("PAGECODE", PageCode);
			entry = (Map.Entry) entries.next(); 
			Object valueObj = entry.getValue(); 
			if(null == valueObj){ 
				value = ""; 
			}else if(valueObj instanceof String[]){ 
				String[] values = (String[])valueObj;
				for(int i=0;i<values.length;i++){ 
					 value = values[i] + ",";
				}
				value = value.substring(0, value.length()-1); 
			}else{
				value = valueObj.toString(); 
			}
			
			name = (String) entry.getKey(); 
			if(name.indexOf("_") != -1 && value != null && !"".equals(value)){		//是问题的id
				questionPd.put("QUESTIONCODE", name.substring(0,name.indexOf("_")));
				if("2".equals(name.substring(name.indexOf("_") + 1,name.length()))){
					 	questionPd.put("ANSWERDATA", value); //是主观题id
					}else{ 
						questionPd.put("ANSWERNUM", value);
					}
					listPd.add(questionPd);
				}else{	
					//用户个人信息
					if("USERNAME".equals(name) || "COMPANY".equals(name) || "BUILDING".equals(name) || "TENANCYTIME".equals(name) ||"PHONE".equals(name) || "CHECKIN".equals(name)){
						userPd.put(name, value);
				}
			}
		}
		try {
			pageresultService.saveUser(listPd,userPd);
			mv.setViewName("questionnaire/userPage/answer_success");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("出现异常,将数据写入文件...");
			String userMsg = JSONObject.toJSONString(userPd);
			String pageMsg = JSONObject.toJSONString(listPd);
			String filePath = PathUtil.getClassResources();			//文件上传路径
			//FileUtil.infoText(filePath,userMsg+"***"+pageMsg);
			mv.setViewName("questionnaire/userPage/order_lose");
		}
		return mv;
	}
	/**
	 * 新增
	 */
	@RequestMapping(value="/save")
	public ModelAndView save() throws Exception{
		logBefore(logger, "新增QuestionPage");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "add")){return null;} //校验权限
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("QUESTIONPAGE_ID", this.get32UUID());	//主键
		String secCodePath = Const.FILEPATHFILE+pd.getString("QUESTIONPAGE_ID")+".jpg";
		pd.put("CREATETIME", Tools.date2Str(new Date()));	//创建日期
		pd.put("SECONDCODE",secCodePath);
		System.out.println(this.getRequest().getCharacterEncoding());
		
		// 获取当前登录用户的用户ID\岗位ID,添加到数据中
		User user = Jurisdiction.getLoginUser();
		String ROLE_ID = user.getROLE_ID();
		String CREATE_USER = user.getUSER_ID();
		pd.put("ROLE_ID",ROLE_ID);
		pd.put("CREATE_USER",CREATE_USER);
		
		questionpageService.save(pd);
		mv.addObject("msg","success");
		mv.setViewName("save_result");
		return mv;
	}
	
	/**
	 * 删除
	 */
	@RequestMapping(value="/delete")
	public void delete(PrintWriter out){
		logBefore(logger, "删除QuestionPage");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "del")){return;} //校验权限
		PageData pd = new PageData();
		try{
			pd = this.getPageData();
			questionpageService.delete(pd);
			out.write("success");
			out.close();
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		
	}
	
	/**
	 * 修改
	 */
	@RequestMapping(value="/edit")
	public ModelAndView edit() throws Exception{
		logBefore(logger, "修改QuestionPage");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "edit")){return null;} //校验权限
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		questionpageService.edit(pd);
		mv.addObject("msg","success");
		mv.setViewName("save_result");
		return mv;
	}
	
	/**
	 * 列表
	 */
	@RequestMapping(value="/list")
	public ModelAndView list(Page page){
		logBefore(logger, "列表QuestionPage");
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		try{
			pd = this.getPageData();
			// 获取当前登录用户的信息以及其子级角色列表
			User user = Jurisdiction.getLoginUser();
			String ROLE_ID = user.getROLE_ID();
			String CREATE_USER = user.getUSER_ID();
			List<PageData> zrolePdList = new ArrayList<PageData>();
			List<PageData> roleList = roleTreeService.listAllRolesToSelect(ROLE_ID,zrolePdList);//列出所有系统用户角色(下拉框)
			ArrayList<String> arr = new ArrayList<String>();
			for (PageData role : roleList) {
				arr.add(role.getString("id"));
			}
			System.out.println(arr);
			pd.put("CREATE_USER", CREATE_USER);
			pd.put("ROLE_ID", arr);
			page.setPd(pd);
			List<PageData>	varList = questionpageService.list(page);	//列出QuestionPage列表
			mv.setViewName("questionnaire/questionpage_list");
			mv.addObject("varList", varList);
			mv.addObject("pd", pd);
			mv.addObject("QX",Jurisdiction.getHC());	//按钮权限
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		return mv;
	}
	
	/**
	 * 去新增页面
	 */
	@RequestMapping(value="/goAdd")
	public ModelAndView goAdd(){
		logBefore(logger, "去新增QuestionPage页面");
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		try {
			mv.setViewName("questionnaire/questionpage_edit");
			mv.addObject("msg", "save");
			mv.addObject("pd", pd);
		} catch (Exception e) {
			logger.error(e.toString(), e);
		}						
		return mv;
	}	
	
	/**
	 * 去修改页面
	 */
	@RequestMapping(value="/goEdit")
	public ModelAndView goEdit(){
		logBefore(logger, "去修改QuestionPage页面");
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		try {
			pd = questionpageService.findById(pd);	//根据ID读取
			mv.setViewName("questionnaire/questionpage_edit");
			mv.addObject("msg", "edit");
			mv.addObject("pd", pd);
		} catch (Exception e) {
			logger.error(e.toString(), e);
		}						
		return mv;
	}	
	
	/**
	 * 批量删除
	 */
	@RequestMapping(value="/deleteAll")
	@ResponseBody
	public Object deleteAll() {
		logBefore(logger, "批量删除QuestionPage");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "dell")){return null;} //校验权限
		PageData pd = new PageData();		
		Map<String,Object> map = new HashMap<String,Object>();
		try {
			pd = this.getPageData();
			List<PageData> pdList = new ArrayList<PageData>();
			String DATA_IDS = pd.getString("DATA_IDS");
			if(null != DATA_IDS && !"".equals(DATA_IDS)){
				String ArrayDATA_IDS[] = DATA_IDS.split(",");
				questionpageService.deleteAll(ArrayDATA_IDS);
				pd.put("msg", "ok");
			}else{
				pd.put("msg", "no");
			}
			pdList.add(pd);
			map.put("list", pdList);
		} catch (Exception e) {
			logger.error(e.toString(), e);
		} finally {
			logAfter(logger);
		}
		return AppUtil.returnObject(pd, map);
	}
	
	/*
	 * 导出到excel
	 * @return
	 */
	@RequestMapping(value="/excel")
	public ModelAndView exportExcel(){
		logBefore(logger, "导出QuestionPage到excel");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "cha")){return null;}
		ModelAndView mv = new ModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		try{
			Map<String,Object> dataMap = new HashMap<String,Object>();
			List<String> titles = new ArrayList<String>();
			titles.add("问卷名称");	//1
			titles.add("创建日期");	//2
			titles.add("问卷状态");	//3
			titles.add("二维码");	//4
			titles.add("问卷访问地址");	//5
			titles.add("备用字段");	//6
			titles.add("备用字段");	//7
			dataMap.put("titles", titles);
			List<PageData> varOList = questionpageService.listAll(pd);
			List<PageData> varList = new ArrayList<PageData>();
			for(int i=0;i<varOList.size();i++){
				PageData vpd = new PageData();
				vpd.put("var1", varOList.get(i).getString("PAGENAME"));	//1
				vpd.put("var2", varOList.get(i).getString("CREATETIME"));	//2
				vpd.put("var3", varOList.get(i).get("PAGESTATUS").toString());	//3
				vpd.put("var4", varOList.get(i).getString("SECONDCODE"));	//4
				vpd.put("var5", varOList.get(i).getString("PAGEADDRESS"));	//5
				vpd.put("var6", varOList.get(i).getString("PAGEDATA"));	//6
				vpd.put("var7", varOList.get(i).get("PAGEDATAS").toString());	//7
				varList.add(vpd);
			}
			dataMap.put("varList", varList);
			ObjectExcelView erv = new ObjectExcelView();
			mv = new ModelAndView(erv,dataMap);
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		return mv;
	}
	
	@InitBinder
	public void initBinder(WebDataBinder binder){
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(format,true));
	}
	
	@Resource(name="adviceService")
	private AdviceService adviceService;
	@Resource(name="advicePictureService")
	private AdvicePictureService advicePictureService;
	@RequestMapping("/serverFeedback")
	public  ModelAndView serverFeedback(HttpServletRequest request,@RequestParam(value = "files", required = false) MultipartFile[] files ,@ModelAttribute("advice")Advice advice){
		PageData pd = new PageData();
		pd = this.getPageData();
		String advice_id=this.get32UUID();
		pd.put("ADVICE_ID", advice_id);	//主键
		int countInsert=0;
		if(advice!=null){
			pd.put("NAME", advice.getNAME());
			pd.put("BUSINESS_NAME", advice.getBUSINESS_NAME());
			pd.put("SERVICE_CLASS", advice.getSERVICE_CLASS());
			pd.put("BELONG_DEPARTMENT", advice.getBELONG_DEPARTMENT());
			pd.put("PHONE", advice.getPHONE());
			pd.put("MATERIAL_NAME", advice.getMATERIAL_NAME());
			pd.put("DISSEMINATE_CONTENT", advice.getDISSEMINATE_CONTENT());
			pd.put("REAL_CONDITION", advice.getREAL_CONDITION());
			try {
				adviceService.save(pd);
				countInsert=1;
			} catch (Exception e) {
				e.printStackTrace();
				countInsert=0;
			}
		}
		Date date=new Date();
		SimpleDateFormat format=new SimpleDateFormat("yyyyMMdd");
		
		String path=request.getSession().getServletContext().getRealPath("uploadFiles/advice");
		//String path=request.getContextPath()+"/uploadfile/advice";
		//File fileUpload = new File("uploadFiles/advice");
      //  String rootDir = fileUpload.getAbsolutePath();
		String notAbsolutPath=path.substring(path.indexOf("Tk-WeChat"));
        File file = new File(path + File.separator + format.format(date));
        System.out.println(file.getAbsolutePath());
        if(!file.exists()){//目录不存在则直接创建
            file.mkdirs();
        }
		if(files!=null&&files.length>0 && countInsert!=0){
			for (int i = 0; i < files.length; i++) {
				String body="";  
			      String ext="";  
			      int pot=file.getName().lastIndexOf(".");  
			      if(pot!=-1){  
			          body= date.getTime() +"";  
			          ext=file.getName().substring(pot);  
			      }else{  
			          body=(new Date()).getTime()+"";  
			          ext="";  
			      }  
			      String newName=body+ext; 
			      
			      PageData pdPicture = new PageData();
			      pdPicture = this.getPageData();
			      String picture_ID=this.get32UUID();
			      pdPicture.put("PICTURE_ID", picture_ID);	//主键
			      String extName="";
			      if (files[i].getOriginalFilename().lastIndexOf(".") >= 0){
						extName = files[i].getOriginalFilename().substring(files[i].getOriginalFilename().lastIndexOf("."));
					}
			      pdPicture.put("URL","uploadFiles/advice"+"/"+format.format(date)+"/"+newName+extName);
			      pdPicture.put("REAL_NAME", files[i].getOriginalFilename());
			      pdPicture.put("ADVICE_ID", advice_id);
			      try {
					advicePictureService.save(pdPicture);
					countInsert=1;
				} catch (Exception e) {
					e.printStackTrace();
					countInsert=0;
				}
			     if(countInsert==1){
			    	 FileUpload.fileUp(files[i],  file.getAbsolutePath(),newName);
			     }
			}
		}
		ModelAndView mv = new ModelAndView();
		mv.setViewName("questionnaire/userPage/answer_success");
		return mv;
	}
}
